package com.fantafeat.Session;import android.app.Activity;import android.content.Context;import android.os.Build;import android.text.TextUtils;import android.util.Patterns;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.view.inputmethod.InputMethodManager;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.widget.Toolbar;import androidx.fragment.app.Fragment;import com.fantafeat.Activity.CricketSelectPlayerActivity;import com.fantafeat.Activity.HomeActivity;import com.fantafeat.R;import com.fantafeat.util.ConstantUtil;import com.fantafeat.util.FragmentUtil;import com.fantafeat.util.MCrypt;import com.fantafeat.util.PrefConstant;import com.google.gson.Gson;public abstract class BaseFragment extends Fragment {	public Context mContext;	public static final String TAG = BaseFragment.class.getClass().getSimpleName();	public MyPreferences preferences;	public AlertDialog.Builder builder;	public Gson gson;	public Toolbar mToolbar;	public TextView mToolbarTitle;	public ImageView mToolbarBack;	protected MCrypt mCrypt;	public abstract void initControl(View view);	public abstract void initClick();	protected void initFragment(View view) {		mContext = getContext();		mCrypt = new MCrypt();		assert mContext != null;		builder = new AlertDialog.Builder(mContext);		gson = new Gson();		preferences = MyApp.getMyPreferences();		view.setClickable(true);		view.setFocusable(true);		view.setBackgroundColor(getResources().getColor(R.color.appBackGround));		initControl(view);		initClick();		MyApp.imageBase=preferences.getPrefString(PrefConstant.IMAGE_BASE);	}	protected void setStatusBarDark() {		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {			Window window = getActivity().getWindow();			window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);			window.setStatusBarColor(getActivity().getResources().getColor(R.color.blackSecondary));		}	}	protected void setStatusBarRed() {		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {			Window window = getActivity().getWindow();			window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);			window.setStatusBarColor(getActivity().getResources().getColor(R.color.colorPrimary));		}	}	@Override	public void onResume() {		super.onResume();		ConstantUtil.isTimeOverShow=false;	}	protected void initToolBar(View view, String id, boolean isBack){		//mToolbar = view.findViewById(R.id.toolbar);		mToolbarTitle = view.findViewById(R.id.toolbar_title);		//SupportToolBar();		if(isBack){			mToolbarBack = view.findViewById(R.id.toolbar_back);			mToolbarBack.setOnClickListener(new View.OnClickListener() {				@Override				public void onClick(View v) {					BaseFragment.this.RemoveFragment();				}			});		}		mToolbarTitle.setText("" + id);	}	public static boolean isValidEmail(CharSequence target) {		return (!TextUtils.isEmpty(target) && Patterns.EMAIL_ADDRESS.matcher(target).matches());	}	public String getEditText(EditText editText){		if(editText!= null){			return editText.getText().toString().trim();		}else{			return "";		}	}	protected void AddNewFragment(final Fragment frargment, final String id) {		new FragmentUtil().addFragment(getActivity(),				R.id.home_fragment_container,				frargment,				id,				FragmentUtil.ANIMATION_TYPE.SLIDE_RIGHT_TO_LEFT);	}	public void RemoveFragment() {		new FragmentUtil().removeFragment(getActivity(),				R.id.cricket_select_frame,				this,				FragmentUtil.ANIMATION_TYPE.SLIDE_LEFT_TO_RIGHT);	}	protected void HideBottomNavigationBar(){		if (((HomeActivity)getActivity())!=null){			((HomeActivity)getActivity()).HideBottomNavigationBar();		}	}	protected void ShowBottomNavigationBar(){		if (((HomeActivity)getActivity())!=null){			((HomeActivity)getActivity()).ShowBottomNavigationBar();		}	}	protected String fragmentTag(int pos){ return ((CricketSelectPlayerActivity)getActivity()).fragmentTag(pos); }	protected void LockCloseDrawer(){ ((HomeActivity) getActivity()).LockCloseDrawerState(); }	protected void LockOpenDrawer(){ ((HomeActivity) getActivity()).LockOpenDrawerState(); }	protected void OpenNavDrawer(){ ((HomeActivity)getActivity()).OpenNavDrawer(); }	protected void CloseNavDrawer(){ ((HomeActivity)getActivity()).CloseNavDrawer(); }	//protected void SupportToolBar(){ ((HomeActivity)getActivity()).setSupportActionBar(mToolbar); }	protected void hideKeyboard(Activity activity) {		InputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);		//Find the currently focused view, so we can grab the correct window token from it.		View view = activity.getCurrentFocus();		//If no view currently has focus, create a new one, just so we can grab a window token from it		if (view == null) {			view = new View(activity);		}		imm.hideSoftInputFromWindow(view.getWindowToken(), 0);	}}